#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xuartps.h"
#include "xparameters.h"
#include <stdlib.h>
#include <stdio.h>
#include "FFT_3D.h"
#include "xil_io.h"
//#include "fft-complex.h"

///////////////////////////////////////////////////////////////////////////////
#define SHAREABLE (1 << 16)
#define NON_CACHED (0)
#define WB_WA_CACHE (1) /* write back, write allocate */
#define WT_CACHE (2) /* write thru */
#define WB_CACHE (3) /* write back */
#define INNER_SHIFT (2)
#define OUTER_SHIFT (12)
#define TEX_MSB (1 << 14)
#define AP_FAULT (0) /* no access, a fault */
#define AP_FULL (3 << 10) /* full access */
#define DOMAIN(x) (x << 5)
#define INNER_NON_CACHED (NON_CACHED << INNER_SHIFT)
#define INNER_WB_WA (WB_WA_CACHE << INNER_SHIFT)
#define INNER_WT (WT_CACHE << INNER_SHIFT)
#define INNER_WB (WB_CACHE << INNER_SHIFT)
#define OUTER_NON_CACHED (TEX_MSB | (NON_CACHED << OUTER_SHIFT))
#define OUTER_WB_WA (TEX_MSB | (WB_WA_CACHE << OUTER_SHIFT))
#define OUTER_WT (TEX_MSB | (WT_CACHE << OUTER_SHIFT))
#define OUTER_WB (TEX_MSB | (WB_CACHE << OUTER_SHIFT))
#define SECTION(attributes) ((attributes) | 0x2)
#define SUPER_SECTION(attributes) ((attributes) | 0x4002)
/* Set the OCM and DDR sections up to match what the standalone BSP does */
u32 Attributes = SECTION(SHAREABLE | OUTER_NON_CACHED | AP_FULL | INNER_WT);
///////////////////////////////////////////////////////////////////////////////////

#define NUM_OF_BYTE 65
#define No_OF_TXN  512
XUartPs_Config *Config_1;
XUartPs Uart_PS_1;

#define BASEADDR       0x43C00000
#define CMD_CNTRL      FFT_3D_S00_AXI_SLV_REG0_OFFSET
#define ADRRESS        FFT_3D_S00_AXI_SLV_REG1_OFFSET
//#define DDR_ADDRESS_READ  0xFFFC0000
#define DDR_ADDRESS_READ  0x0004000
#define DDR_ADDRESS_WRITE 0x00200000
#define DDR_INITIAL_VAL  0xCDAC5010

long long binaryToDecimal(char n[64])
{
   // string num = n;
    long long dec_value = 0;

    // Initializing base value to 1, i.e 2^0
    long long  base = 1;

    long long len = 64;
    for (int i = len - 1; i >= 0; i--) {
        if (n[i] == '1')
            dec_value += base;
        base = base * 2;
    }

    return dec_value;
}


int main()
{
    init_platform();


    int Status=0;
    u32 RecvCount=0;
    static char RecvBuffer[128];
	long long num=0;
    long long value=0;

	print(" Hello World, Testing MIP (MY IP) Read and Write functionality \n\r");

	Xil_SetTlbAttributes(DDR_ADDRESS_READ, Attributes);

	/*************************
	 * UART 1 initialization *
	 *************************/


	Config_1 = XUartPs_LookupConfig(XPAR_XUARTPS_0_DEVICE_ID);
	if (NULL == Config_1) {
		return XST_FAILURE;
	}
	Status = XUartPs_CfgInitialize(&Uart_PS_1, Config_1, Config_1->BaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}
//----------------------UART Serial Reading---------------------------------------------------
// Getting RAW Data from UART
	for(int i=0; i<No_OF_TXN; ++i)
	{
		Status = 0;

		while (Status < NUM_OF_BYTE ) {
					Status +=	XUartPs_Recv(&Uart_PS_1,  &RecvBuffer[RecvCount], NUM_OF_BYTE);
					RecvCount = Status;
		        }

		num = binaryToDecimal(RecvBuffer);       // number base 16
		Xil_Out64(DDR_ADDRESS_READ+8*i, num);
	}
// Check the data  by printing, if want
	printf(" Reading the DDR Region through Processor");  printf("\n");
	   for (int h = 0; h < No_OF_TXN; h++)
	   {
		   uint64_t value = Xil_In64(DDR_ADDRESS_READ+8*h);
	        printf("DDR_Value at  0x%x : 0x%llx",DDR_ADDRESS_READ+8*h, value);  printf("\n");

	   }
//---------------------------3DFFT Start----------------------------------------------
	   value = FFT_3D_mReadReg(BASEADDR,CMD_CNTRL);
	        printf("status value : %d \n", value);

	//-------------3DFFT----------------------------------------
	        FFT_3D_mWriteReg(BASEADDR,ADRRESS,DDR_ADDRESS_READ); // address
	      // for(int i=0; i<16; ++i){

	      	 FFT_3D_mWriteReg(BASEADDR,CMD_CNTRL,0x00000001); // START READ ----
	          // FFT_3D_mWriteReg(BASEADDR,CMD_CNTRL,0x00000001); // START READ ----
	      // }

	  	  value = FFT_3D_mReadReg(BASEADDR,CMD_CNTRL);
	  while(!(value & 0x00000002))
	  {
	  	  printf("STATUS.... %d\n", value);
	  	  value = FFT_3D_mReadReg(BASEADDR,CMD_CNTRL);
	  }
	  printf("STATUS.... %d\n", value);

	  FFT_3D_mWriteReg(BASEADDR,ADRRESS, DDR_ADDRESS_WRITE); // address
	  for(int i=0; i<16; ++i){

	  	 FFT_3D_mWriteReg(BASEADDR,CMD_CNTRL,0x00000004); // START READ ----
	    // FFT_3D_mWriteReg(BASEADDR,CMD_CNTRL,0x00000001); // START READ ----
	  }

	  printf(" Reading the DDR Region through Processor");  printf("\n");
	     for (int h = 0; h < No_OF_TXN; h++)
	     {
	  	    value = Xil_In32(DDR_ADDRESS_WRITE+4*h);
	          printf("After OPERATINS...........DDR_Value at  0x%x : 0x%x ",DDR_ADDRESS_WRITE+4*h, value);  printf("\n");

	     }





    cleanup_platform();
    return 0;
}



